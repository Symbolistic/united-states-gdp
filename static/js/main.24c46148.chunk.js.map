{"version":3,"sources":["App.js","index.js"],"names":["renderD3","data","svg","length","margin","top","right","bottom","left","height","minDate","d3","d","Date","maxDate","xScale","domain","range","xAxis","tickFormat","maxGDP","yScale","yAxis","console","log","main","current","attr","append","call","selectAll","join","value","on","text","select","remove","App","svgRef","useRef","useEffect","fetch","then","response","json","result","id","ref","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+OA6BA,IAAMA,EAAW,SAACC,EAAMC,GAEtB,GAAID,EAAKE,OAAS,EAAE,CAIlB,IAAIC,EAAS,CAAEC,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IACjDC,EAAS,IAAML,EAAOC,IAAMD,EAAOG,OAInCG,EAAUC,IAAOV,GAAM,SAAAW,GAAC,OAAI,IAAIC,KAAKD,EAAE,OACvCE,EAAUH,IAAOV,GAAM,SAAAW,GAAC,OAAI,IAAIC,KAAKD,EAAE,OAEvCG,EAASJ,MACFK,OAAO,CAACN,EAASI,IACjBG,MAAM,CAAC,EARN,MAURC,EAAQP,IAAcI,GAAQI,WAAWR,IAAc,OAIvDS,GADST,IAAOV,GAAM,SAAAW,GAAC,OAAIA,EAAE,MACpBD,IAAOV,GAAM,SAAAW,GAAC,OAAIA,EAAE,OAE7BS,EAASV,MACFK,OAAO,CAAC,EAAGI,IACXH,MAAM,CAACR,EAAQ,IAEtBa,EAAQX,IAAYU,GAGxBE,QAAQC,IAAI,UAEZ,IAQIC,EARQd,IAAUT,EAAIwB,SACTC,KAAK,QA1BV,IA0B2BvB,EAAOE,MAAQF,EAAOI,MAC5CmB,KAAK,SAAUlB,EAASL,EAAOC,IAAMD,EAAOG,QAM5CqB,OAAO,KACPD,KAAK,YADX,oBACqCvB,EAAOI,KAD5C,aACqDJ,EAAOC,IAD5D,MAEMsB,KAAK,QAnCV,KAoCKA,KAAK,SAAUlB,GACfkB,KAAK,QAAS,QAG/BF,EAAKG,OAAO,KACPD,KAAK,KAAM,UACXA,KAAK,YAFV,uBAEuClB,EAFvC,MAGKoB,KAAKX,GAGVO,EAAKG,OAAO,KACPD,KAAK,KAAM,UACXE,KAAKP,GAGVG,EACGK,UAAU,QACV7B,KAAKA,GACL8B,KAAK,QACLJ,KAAK,QAAS,OACdA,KAAK,aAAa,SAAAK,GAAK,OAAIA,EAAM,MACjCL,KAAK,YAAY,SAAAK,GAAK,OAAIA,EAAM,MAChCL,KAAK,QA1DI,IA0DW,KACpBA,KAAK,UAAU,SAAAK,GAAK,OAAIvB,EAASY,EAAOW,EAAM,OAC9CL,KAAK,KAAK,SAAAK,GAAK,OAAIjB,EAAO,IAAIF,KAAKmB,EAAM,QACzCL,KAAK,KAAK,SAAAK,GAAK,OAAIX,EAAOW,EAAM,OAChCL,KAAK,OAAQ,eACbM,GAAG,cAAc,SAAAD,GAChBP,EACGK,UAAU,YACV7B,KAAK,CAAC+B,IACND,KAAK,QACLJ,KAAK,IAAKZ,EAAO,IAAIF,KAAKmB,EAAM,KAAO,IACvCL,KAAK,IAAKN,EAAO,MACjBM,KAAK,QAAS,WACdA,KAAK,KAAM,WACXA,KAAK,aAAa,SAAAK,GAAK,OAAIA,EAAM,MACjCE,KAAKF,EAAM,IACXL,KAAK,cAAe,aAIxBM,GAAG,cAAc,WAAQR,EAAKU,OAAO,YAAYC,cAIzCC,EAhHf,WACE,IAAMC,EAASC,mBAYf,OAVAC,qBAAW,WACTC,MAAM,4FACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MACC,SAACG,GACC7C,EAAS6C,EAAO5C,KAAMqC,QAG3B,IAGD,6BACE,wBAAIQ,GAAG,SAAP,qBACA,yBAAKC,IAAKT,MCnBhBU,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.24c46148.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react';\n//import { select } from 'd3'\nimport * as d3 from \"d3\";\n//import moment from 'moment'\nimport './App.css';\n\n\nfunction App() {\n  const svgRef = useRef();\n\n  useEffect (() => {\n    fetch(\"https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/GDP-data.json\")\n      .then(response => response.json())\n      .then(\n        (result) => {\n          renderD3(result.data, svgRef)\n        }\n      )\n  }, []);\n\n  return (\n    <div>\n      <h1 id=\"title\">United States GDP</h1>\n      <svg ref={svgRef}>\n      </svg>\n    </div>\n  );\n}\n\nconst renderD3 = (data, svg) => {\n\n  if (data.length > 1){\n    // This is just to make sure ASync doesn't act stupid and runs this multiple times, only ONCE\n\n    // Set the main SVG area values\n    let margin = { top: 20, right: 20, bottom: 50, left: 60 };\n    let height = 500 - margin.top - margin.bottom;\n    let width = 700;\n\n    // Create X Axis\n    let minDate = d3.min(data, d => new Date(d[0]))\n    let maxDate = d3.max(data, d => new Date(d[0]))\n\n    let xScale = d3.scaleTime()\n              .domain([minDate, maxDate])\n              .range([0, width]);\n\n    let xAxis = d3.axisBottom(xScale).tickFormat(d3.timeFormat('%Y'))\n\n    // Create Y Axis\n    let minGDP = d3.min(data, d => d[1]);\n    let maxGDP = d3.max(data, d => d[1]);\n\n    let yScale = d3.scaleLinear()\n              .domain([0, maxGDP])\n              .range([height, 0]);\n\n    let yAxis = d3.axisLeft(yScale)\n\n    // Yo yo yoooooo ITS TIME TO USE D3 BOIIIIIIII..... I'm not excited either.\n    console.log(\"LOADED\")\n    // This is the ENTIRE CHART\n    let chart = d3.select(svg.current)\n                    .attr('width', width + margin.right + margin.left)\n                    .attr('height', height + margin.top + margin.bottom);\n\n\n\n    /* This is the CONTAINED AREA that will hold the CHART DATA, \n       everything outside this is just margins. */\n    let main = chart.append('g')\n                    .attr(\"transform\", `translate(${margin.left}, ${margin.top})`)\n                    .attr(\"width\", width)\n                    .attr(\"height\", height)\n                    .attr(\"class\", \"main\");\n\n    // Append the X Axis\n    main.append('g')\n        .attr('id', 'x-axis')\n        .attr(\"transform\", `translate(0, ${height})`)\n        .call(xAxis);\n\n    // Append the Y Axis\n    main.append('g')\n        .attr('id', 'y-axis')\n        .call(yAxis);\n        \n    // DAMN! LOOK AT THOSE BARS!\n    main\n      .selectAll(\".bar\") // What bars?\n      .data(data)        // DEEZ BARS\n      .join(\"rect\")     \n      .attr(\"class\", \"bar\") // HAH! GOTTEEMMMMMM!!\n      .attr(\"data-date\", value => value[0])\n      .attr(\"data-gdp\", value => value[1])\n      .attr(\"width\", width/274)\n      .attr(\"height\", value => height - yScale(value[1]))\n      .attr('x', value => xScale(new Date(value[0])))\n      .attr('y', value => yScale(value[1]))\n      .attr(\"fill\", \"lightsalmon\")\n      .on(\"mouseenter\", value => {\n        main\n          .selectAll(\".tooltip\")\n          .data([value])\n          .join(\"text\")\n          .attr('x', xScale(new Date(value[0])) - 20)\n          .attr('y', yScale(7000))\n          .attr(\"class\", \"tooltip\")\n          .attr(\"id\", \"tooltip\")\n          .attr(\"data-date\", value => value[0])\n          .text(value[0])\n          .attr(\"text-anchor\", \"middle\")\n          // .transition()\n          // .attr(\"opacity\", 1)\n      })\n      .on(\"mouseleave\", () => { main.select(\".tooltip\").remove() })\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}